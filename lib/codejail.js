// Generated by LiveScript 1.3.1
(function(){
  "use strict";
  var required, config, _module;
  required = require('./das').required;
  config = require('./config');
  _module = function(_, moment, fs, $, __, co, debug, uid, os){
    return function(){
      var cmd, writeAsync, tempDir, ref$, deployProfile, runProfile, removeProfile, default_limits, setLimits, jail_code, simplyRun, iface;
      cmd = function(it){
        return $.promisify(__.exec)(it, {
          async: true,
          silent: !config.get().verbose
        });
      };
      writeAsync = $.promisify(fs.writeFile);
      tempDir = os.tmpdir();
      ref$ = require('./armor'), deployProfile = ref$.deployProfile, runProfile = ref$.runProfile, removeProfile = ref$.removeProfile;
      default_limits = {
        cpu: 1,
        realtime: 1,
        fsize: 0
      };
      setLimits = function(it){
        return default_limits = _.assign(default_limits, it);
      };
      jail_code = function(engine, code, argv, files, stdin){
        return co(function*(){
          var profile, command, sandboxDir, configOptions, aaProfileContent, user, result, success, e;
          profile = require('./profiles')[engine];
          if (profile == null) {
            throw "Sorry, non existing profile";
          }
          command = "";
          sandboxDir = tempDir + "/" + uid(8);
          yield cmd("mkdir -p " + sandboxDir);
          configOptions = {
            programName: sandboxDir + "/jailed.code",
            folderName: sandboxDir + ""
          };
          command = command + ("SANDBOXDIR=" + sandboxDir + " ");
          debug(profile);
          if (profile.env != null) {
            command = command + (" " + profile.env(configOptions) + " ");
          }
          yield _.mapValues(files, function(content, name){
            return writeAsync(sandboxDir + "/" + name, content, 'utf-8');
          });
          debug("Writing profile");
          aaProfileContent = profile.aa(sandboxDir + "/jailed.code", configOptions);
          debug(aaProfileContent);
          yield deployProfile(sandboxDir + "/profile.aa", aaProfileContent);
          code = ("#!" + profile.path + "\n") + code;
          yield writeAsync(sandboxDir + "/jailed.code", code, 'utf-8');
          yield cmd("chmod +x " + sandboxDir + "/jailed.code");
          user = profile.user;
          command = command + runProfile(user, sandboxDir + "/profile.aa", sandboxDir + "/jailed.code");
          debug(command);
          try {
            result = yield cmd(command);
            debug(result);
            success = true;
          } catch (e$) {
            e = e$;
            result = e;
            debug(result);
            success = false;
          }
          yield removeProfile(sandboxDir + "/profile.aa");
          yield cmd("rm -rf " + sandboxDir);
          return {
            success: success,
            result: result
          };
        })['catch'](function(){
          return {
            success: false,
            result: 'internal error'
          };
        });
      };
      simplyRun = function(engine, code){
        var profiles;
        profiles = require('./profiles');
        if (profiles[engine] == null) {
          throw "Sorry, no current profile for " + engine;
        }
        return jail_code(engine, code, "", {}, "");
      };
      iface = {
        jail_code: jail_code,
        run: simplyRun
      };
      return iface;
    };
  };
  module.exports = _module(require('lodash'), require('moment'), required()('fs'), require('bluebird'), required()('shelljs'), require('co'), require('debug')('codejail'), required()('uid'), required()('os'))();
}).call(this);
