// Generated by LiveScript 1.3.1
(function(){
  var request, create, expect, b64, app, $, packet, configureServerDependencies, fakeTestPayload, fakeTestPayloadFail, rq, rqfail, o, jsTests;
  request = require('co-supertest');
  create = require('./server').create;
  expect = require('chai').expect;
  b64 = require('base64-url');
  app = create();
  request = request.agent(app.listen());
  $ = function(it){
    return JSON.stringify(it(), 0, 4);
  };
  packet = function(studentId, response, payload){
    return {
      xqueue_body: $(function(){
        return {
          student_info: $(function(){
            return {
              anonymized_id: studentId
            };
          }),
          student_response: response,
          grader_payload: $(function(){
            return {
              payload: b64.encode($(function(){
                return payload;
              }))
            };
          })
        };
      })
    };
  };
  configureServerDependencies = function(){
    var configure;
    configure = require('./das').configure;
    return configure({
      'fs': 'fs',
      'shelljs': 'shelljs',
      'os': 'os',
      'uid': 'uid'
    });
  };
  configureServerDependencies();
  fakeTestPayload = {
    lang: 'fakelang',
    base: "original-text",
    solution: "original-solution",
    validation: "assert(x==1);",
    context: null
  };
  fakeTestPayloadFail = {
    lang: 'fakelang',
    base: "original-text",
    solution: "original-solution",
    validation: "bombit",
    context: null
  };
  rq = function(it){
    return request.post('/').send(it).set('Accept', 'application/json').expect('Content-Type', /json/).expect(200).end();
  };
  rqfail = function(it){
    return request.post('/').send(it).set('Accept', 'application/json').expect('Content-Type', /json/).expect(406).end();
  };
  describe('Basic request/response protocol', function(empty){
    it('should return 404 when method is not post', function*(){
      var res;
      res = yield request.get('/').expect(404).end();
      expect(res.text).to.equal('sorry, only POST methods allowed');
    });
    return it('should return an error when the request is not compliant with specs', function*(){
      var res;
      res = yield request.post('/').send({
        foo: true
      }).expect(406).end();
    });
  });
  describe('Compliant requests', function(empty){
    it('should succeed when fake program works', function*(){
      var res;
      res = yield rq(packet(333, 'var x = 1;', fakeTestPayload));
      expect(res.body.correct).to.equal(true);
    });
    it('should fail when fake program bombs', function*(){
      var res;
      res = yield rq(packet(333, 'var x = 1;', fakeTestPayloadFail));
      expect(res.body.correct).to.equal(false);
      expect(res.body.msg).to.equal("noo! it failed");
    });
    return it('should not run a program without a language id', function*(){
      var res;
      res = yield rqfail(packet(333, 'var x=1; console.log(x);', {
        validation: ""
      }));
    });
  });
  o = function(program, validation, correct, msg, desc){
    var actions;
    actions = function*(){
      var res;
      res = yield rq(packet(333, program, {
        lang: 'javascript',
        validation: validation
      }));
      expect(res.body.msg).to.equal(msg);
      expect(res.body.correct).to.equal(correct);
    };
    if (correct) {
      return {
        desc: "when: " + desc + " -> it should work",
        actions: actions
      };
    } else {
      return {
        desc: "when: " + desc + " -> it should not work",
        actions: actions
      };
    }
  };
  jsTests = [o('var x=1; console.log(x);', '', true, "ok! output: 1\n", 'working program , empty validation'), o('var x=1; console.log(x);', undefined, true, "ok! output: 1\n", 'working program , undefined validation'), o('var x=1; console.log(x);', 'return 0', true, "ok! output: 1\n", 'working program , safe validation'), o('var x=1; console.log(x);', 'process.exit(0)', true, "ok! output: 1\n", 'working program , safe validation'), o('var x=1; console.log(x);', 'process.exit(2)', false, "no! output: Error: 2", 'working program , returns error'), o('var x=1; console.log(x);', "require('assert')(x==1); process.exit(0)", true, "ok! output: 1\n", 'working program , validation succ'), o('var x=1; console.log(x);', "require('assert')(x==2); process.exit(0)", false, "no! output: Error: 1", 'working program , validation fails')];
  describe('Javascript execution', function(empty){
    var i$, ref$, len$, t, results$ = [];
    for (i$ = 0, len$ = (ref$ = jsTests).length; i$ < len$; ++i$) {
      t = ref$[i$];
      results$.push(it(t.desc, t.actions));
    }
    return results$;
  });
}).call(this);
