// Generated by LiveScript 1.3.1
(function(){
  var request, create, expect, b64, app, $, packet;
  request = require('co-supertest');
  create = require('./server').create;
  expect = require('chai').expect;
  b64 = require('base64-url');
  app = create();
  request = request.agent(app.listen());
  $ = function(it){
    return JSON.stringify(it(), 0, 4);
  };
  packet = function(studentId, response, payload){
    return {
      xqueue_body: $(function(){
        return {
          student_info: $(function(){
            return {
              anonymized_id: studentId
            };
          }),
          student_response: response,
          grader_payload: $(function(){
            return {
              payload: b64.encode($(function(){
                return payload;
              }))
            };
          })
        };
      })
    };
  };
  describe('Initialization', function(empty){
    it('should return 404 when method is not post', function*(){
      var res;
      res = yield request.get('/').expect(404).end();
      expect(res.text).to.equal('sorry, only POST methods allowed');
    });
    it('should return an error when the request is not compliant with specs', function*(){
      var res;
      res = yield request.post('/').send({
        foo: true
      }).expect(406).end();
    });
    return it('should return a success when request is compliant', function*(){
      var res;
      res = yield request.post('/').send(packet(333, 'my answer', {
        what: true
      })).expect(200).end();
    });
  });
}).call(this);
