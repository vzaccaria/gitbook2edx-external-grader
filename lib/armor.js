// Generated by LiveScript 1.3.1
(function(){
  "use strict";
  var required, fs, __, os, $, cmd, writeAsync, co, debug, _module;
  required = require('./das').required;
  fs = required()('fs');
  __ = required()('shelljs');
  os = require('os');
  $ = require('bluebird');
  cmd = function(it){
    return $.promisify(__.exec)(it, {
      async: true
    });
  };
  writeAsync = $.promisify(fs.writeFile);
  co = require('co');
  debug = require('debug')('armor');
  _module = function(){
    var cmd, writeAsync, deployProfile, runProfile, removeProfile, iface;
    cmd = function(it){
      return $.promisify(__.exec)(it, {
        async: true
      });
    };
    writeAsync = $.promisify(fs.writeFile);
    deployProfile = function(profilePath, profile){
      if (os.platform() === 'linux') {
        return co(function*(){
          yield writeAsync(profilePath, profile, 'utf-8');
          yield cmd("sudo apparmor_parser -a " + profilePath);
        });
      } else {
        return co(function*(){
          yield writeAsync(profilePath, profile, 'utf-8');
        });
      }
    };
    runProfile = function(user, profilePath, script){
      var pre;
      if (os.platform() === 'linux') {
        pre = "";
        if (user != null) {
          pre = "sudo -u " + user;
        } else {
          pre = "sudo";
        }
        return pre + " aa-exec -f " + profilePath + " " + script;
      } else {
        return script;
      }
    };
    removeProfile = function(profilePath){
      if (os.platform() === 'linux') {
        return co(function*(){
          yield cmd("sudo apparmor_parser -R " + profilePath);
        });
      } else {
        return co(function*(){
          true;
        });
      }
    };
    iface = {
      deployProfile: deployProfile,
      runProfile: runProfile,
      removeProfile: removeProfile
    };
    return iface;
  };
  module.exports = _module();
}).call(this);
